name: Validate & Deploy
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  ENVIRONMENT: 'int'
  TEMPLATE_FILE: 'main'
  LOCATION: 'we'
  RESOURCE_GROUP: 'Test-Lab'

permissions:
  id-token: write
  contents: write


jobs:
  deploy:
    environment: int
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Deploy using Bicep
      uses: ./.github/actions/bicep-network-deploy
      with:
        azureClientId: ${{ secrets.AZURE_CLIENT_ID }}
        azureTenantId: ${{ secrets.AZURE_TENANT_ID }}
        azureSubscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        environment: 'int'
        templateFile: 'main'
        location: 'we'
        resourceGroup: 'Test-Lab'


    - name: Set Subnet ID as GitHub Secret
      run: |
        # Extract subnet ID from deployment (this depends on your deployment command)
        SUBNET_ID="<extracted_subnet_id>"

        # GitHub API Endpoint to create/update a repository secret | we are setting the subnetID we got in this module as a var for remote repo VM
        API_ENDPOINT="https://api.github.com/repos/MKTHEPLUGG/vm/actions/secrets/SUBNET_ID"
        PUBLIC_KEY_ENDPOINT="${API_ENDPOINT}/public-key"

        # Fetch the public key and key_id for encryption
        RESPONSE_JSON=$(curl -s -H "Authorization: token ${{ secrets.GH_API_TOKEN }}" $PUBLIC_KEY_ENDPOINT)
        PUBLIC_KEY=$(echo $RESPONSE_JSON | jq -r .key)
        KEY_ID=$(echo $RESPONSE_JSON | jq -r .key_id)

        # Encrypt the SUBNET_ID using the fetched public key
        ENCRYPTED_VALUE=$(echo -n "$SUBNET_ID" | openssl pkeyutl -encrypt -pubin -inkey <(echo "$PUBLIC_KEY" | base64 --decode) -pkeyopt rsa_padding_mode:oaep | base64 | tr -d '\n')

        # Call GitHub API to set the secret
        curl -X PUT $API_ENDPOINT \
          -H "Authorization: token ${{ secrets.GH_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"encrypted_value":"'${ENCRYPTED_VALUE}'", "key_id":"'${KEY_ID}'"}'
      env:
        GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
